(define (domain jar)

(:predicates    (handEmptyJar)
                (handEmptyLid)
                (holdingJar ?x)
                (holdingLid ?x)
                (noLid ?x)
                (ontable ?x ?loc - location)
                (clear ?x)
)

(:action pick-up-jar
    :parameters (?x -jar ?loc - location)
    :precondition (and (handEmptyJar)
                       (ontable ?x ?loc)
                       (not (noLid ?x)))
    :effect (and (not(handEmptyJar))
                 (not (ontable ?x ?loc))
                 (not (noLid ?x))
                 (holdingJar ?x)
                 (clear ?loc))
)

(:action pick-up-lid
    :parameters (?x -jar ?loc - location)
    :precondition (and (handEmptyLid)
                       (ontable ?x ?loc)
                       (not (noLid ?x)))
    :effect (and (not(handEmptyLid))
                 (not (ontable ?x ?loc))
                 (not (noLid ?x))
                 (holdingLid ?x)
                 (clear ?loc))
)

(:action put-down-jar
    :parameters (?x ?loc)
    :precondition (and (holdingJar ?x)
                       (noLid ?x)
                       (clear ?loc))
    :effect (and (not (holdingJar ?x))
                 (handEmptyJar)
                 (ontable ?x ?loc)
                 (not (clear ?loc)))
)

(:action put-down-lid
    :parameters (?x ?loc)
    :precondition (and (holdingLid ?x)
                       (noLid ?x)
                       (clear ?loc))
    :effect (and (not (holdingLid ?x))
                 (handEmptyLid)
                 (ontable ?x ?loc)
                 (not (clear ?loc)))
)

(:action twist
    :parameters (?x ?y)
    :precondition (and (holdingJar ?x)
                  (holdingLid ?y)
                  (not (noLid ?x)))
    :effect (and (holdingJar ?x)
                 (holdingLid ?y)
                 (noLid ?x))
)